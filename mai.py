import re
import pandas as pd
import math



def applytonum(xraw=None,yraw=None):
    #xs = list(range(1, 100))测试数组    print(applytonum(xs))
    if xraw==None:
        xraw=[]


    recv = list(map(float, xraw))
    pos=recv[0]+(recv[-1]-recv[0])*0.55   #超过55%后 曲线上升

    func = lambda x, pos: -50 if x > pos else 0

    res = [func(float(t),pos) for t in xraw]
    #res = [math.pow((float(t) * 0.05),2)  for t in xraw]
    #res = [math.exp(float(t)*0.05) + 100 for t in xraw]
    #res = [5.0*math.log(float(t))+100 for t in xraw]
    #res = [80.0*math.sin(float(t)) for t in xraw]
    #math.log(x[, base])  返回值

#    add= [2 for x in range(len(xraw))]   所有的数都是2   加到y中
    if yraw == None:
        yraw=[]
        return res
    else:
        c = list(map(lambda x: x[0] + x[1], zip(yraw, res)))
        print("________________合并值______________")
        print(c)
        print("________________合并值______________")

        return c


    #return res



def loadDatadet(infile):
    f=open(infile,'r',encoding='utf-8')
    sourceInLine=f.readlines()
    dataset=[]
    for line in sourceInLine:
        temp1=line.strip('\n')
        temp2=temp1.split('\t')
        dataset.append(temp2)

    f.close()
    #return dataset
    for j in sourceInLine:

        return j
infile='input.txt'
raw=loadDatadet(infile)

#print(raw)

##############提取字符串x###############

#raw="L9.91,238.14L14.87,241.05L19.83,249.4L24.79,278.74L29.74,294.15L34.7,284.74L39.66,283.22L44.62,286.9L49.57,282.59L54.53,291.89L59.49,293.92L64.44,264.58L69.4,275.11L74.36,290.78L79.32,313.5L84.27,302.45L89.23,302.72L94.19,279.98L99.15,282.7L104.1,287.7L109.06,293.94L114.02,279.4L118.97,287.17L123.93,278.18L128.89,254.84L133.85,260.78L143.76,275.86L148.72,262.94L153.68,257.8L158.63,254.74L163.59,256.97L168.55,258.36L173.5,259.86L178.46,260.49L183.42,253.86L188.38,244.17L193.33,251.79L198.29,243.91L203.25,252.97L208.21,253.02L213.16,276.91L218.12,272.64L223.08,263.09L228.03,271.13L232.99,286.23L237.95,289.57L242.91,277.09L247.86,254.13L252.82,258L257.78,227.21L262.74,250.91L267.69,210.94L272.65,214.96L277.61,238.8L282.56,267.44L287.52,271.16L292.48,259.44L297.44,261.14L302.39,268.37L307.35,242.43L312.31,224.88L317.26,184.94L322.22,120.27L327.18,96.98L332.14,102.63L337.09,137.09L342.05,167.61L347.01,208.84L351.97,221.52L356.92,221.5L361.88,149.93L366.84,110.85L371.79,111.25L376.75,97.38L381.71,111.92L386.67,121.91L391.62,129.42L396.58,66.48L401.54,67.64L406.5,16.5L411.45,58.04L416.41,69.12L421.37,93.32L426.32,113.51L431.28,132.73L436.24,138.38L441.2,167.68L446.15,182.53L451.11,192.76L456.07,172.5L461.03,178.32L465.98,187.76L470.94,231.18L475.9,224.22L480.85,222.57L485.81,210.81L490.77,223.86L495.73,157.14L500.68,138.31L505.64,178.12L510.6,168.6L515.56,135.94L520.51,104.65L525.47,145.4L530.43,183.64L535.38,171.19L545.3,161.77L550.26,160.55L555.21,130.74L560.17,112L565.13,109.15L570.09,145.97L575.04,141.79L580,186.22"
long="L10.55,231.81L15.82,241.23L21.09,251.05L26.36,259.26L36.91,274.21L42.18,280.75L47.45,284.62L52.73,290.05L58,290.22L63.27,292.22L68.55,295.53L73.82,300.09L79.09,301.14L84.36,306.15L89.64,307.53L94.91,310.25L105.45,313.5L110.73,310.51L121.27,306.46L126.55,305.94L131.82,300.51L137.09,300.21L147.64,279.36L152.91,279.72L158.18,275.31L163.45,260.48L168.73,245.12L174,243.68L179.27,235.25L184.55,229.04L195.09,205.24L200.36,202.8L205.64,196.23L210.91,177.59L216.18,164.12L221.45,159.91L226.73,155.23L232,157.57L237.27,145.99L242.55,141.11L253.09,143.24L258.36,131.93L263.64,133.53L268.91,130.69L274.18,130.88L279.45,135.8L284.73,131.43L290,122.22L295.27,115.22L300.55,113.53L305.82,115.35L311.09,112.23L316.36,107.2L321.64,117.21L326.91,130.66L332.18,136.36L337.45,137.56L342.73,135.99L348,143.98L353.27,136.3L358.55,130.84L363.82,123.38L369.09,118.46L374.36,117.1L379.64,107.97L384.91,107.8L390.18,111.43L395.45,107.14L400.73,104.77L406,105.38L411.27,111.63L416.55,105.38L421.82,104.47L427.09,98.27L437.64,101.12L442.91,109.17L448.18,115.55L453.45,114.46L458.73,115.95L464,113.47L469.27,107.35L474.55,87.31L479.82,80.6L485.09,87.79L490.36,95.62L495.64,94.08L500.91,87.89L506.18,74.22L511.45,68.39L516.73,59.8L522,61.56L527.27,60.85L532.55,53.47L537.82,59.9L543.09,46.5L548.36,16.5L553.64,16.65L558.91,28.11L564.18,42.38L569.45,45.62L574.73,41.73L580,43.61"
resultx =re.findall("(?<=L).*?(?=,)",raw)   #包含和不包含          L到，之间  左边

#rint ("________________平均加一个数______________")
#print (applytonum(xraw=resultx))
#print ("________________一个数______________")
# print ("________________一个数______________")
# print (resultx[10])
# print ("________________一个数______________")
save=False



##############提取字符串y###############

resulty =re.findall("(?<=,).*?(?=L)",raw)   #包含和不包含

#print ("纵坐标")
#print(resulty)    #纵坐标

# for y in resulty:
#
#     print (y+"\t")

#############存储字符串##################


#num2=[231.81, 241.23, 251.05, 259.26, 274.21, 280.75, 284.62, 290.05, 290.22, 292.22, 295.53, 300.09, 301.14, 306.15, 307.53, 310.25, 313.5, 310.51, 306.46, 305.94, 300.51, 300.21, 279.36, 279.72, 275.31, 260.48, 245.12, 243.68, 235.25, 229.04, 205.24, 202.8, 196.23, 177.59, 164.12, 159.91, 155.23, 157.57, 145.99, 141.11, 143.24, 131.93, 133.53, 130.69, 130.88, 135.8, 131.43, 122.22, 115.22, 113.53, 115.35, 112.23, 107.2, 117.21, 130.66, 136.36, 137.56, 135.99, 143.98, 136.3, 130.84, 123.38, 118.46, 117.1, 107.97, 107.8, 111.43, 107.14, 104.77, 105.38, 111.63, 105.38, 104.47, 98.27, 101.12, 109.17, 115.55, 114.46, 115.95, 113.47, 107.35, 87.31, 80.6, 87.79, 95.62, 94.08, 87.89, 74.22, 68.39, 59.8, 61.56, 60.85, 53.47, 59.9, 46.5, 16.5, 16.65, 28.11, 42.38, 45.62, 41.73]
resnum=list(map(float, resulty))
df = pd.DataFrame(resnum, columns=['company_name'])
save=True
if save==True:
    writer = pd.ExcelWriter('test2.xlsx')
    # 保存到本地excel
    df.to_excel(writer, index=False)
    writer.save()

###############读取一列数据  处理好的####################
df = pd.read_excel("test2.xlsx")

aa = list(df.iloc[:, 0].values)

con2num= list(map(float, aa))
#print (con2num)
########################################################

#######################处理#############################

aa=applytonum(resultx,aa)


#######################################################




##################### 拼接 ###################################
x=list(map(str, resultx))

y=list(map(str, aa))

print ("字符串x长度为",len(x))
print ("字符串y长度为",len(y))
# print ("*"*20)
# print (x)
#
# print ("*"*20)
# print (y)
# z=["L"+x[i]+y[i] for i in len(resultx)]
# print (z)



wanzheng = []
indexrange=min(len(x),len(y))
for i in range(0, indexrange):
    # print(list1[i]+list2[i])
    wanzheng.append("L"+x[i] +"," +y[i])
# print(wanzheng)  # 输出结果  ['1.1', '2.2']

print ("合并后的")
s = "".join(wanzheng)


def saveDatadet(data):
    outfile=open("ouput.txt",'w')
    # for i in range(len(data)):
    #     s = str(data[i]).replace('[', '').replace(']', '')  # 去除[],这两行按数据不同，可以选择
    #     s = s.replace("'", '').replace(',', '') + '\n'  # 去除单引号，逗号，每行末尾追加换行符
    outfile.write(data)

saveDatadet(s)

print(s)


